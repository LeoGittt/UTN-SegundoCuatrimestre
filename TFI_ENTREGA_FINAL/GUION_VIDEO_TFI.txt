# =========================================================================
# GUI√ìN PARA VIDEO TFI - BASES DE DATOS I
# Sistema de Gesti√≥n de Pedidos y Env√≠os
# Integrantes: Leonel Gonz√°lez y Gonzalo Inga
# UTN - Octubre 2025
# Duraci√≥n: 12-15 minutos
# =========================================================================

## üìπ CONFIGURACI√ìN T√âCNICA
- C√°mara encendida al inicio para presentaciones
- Compartir pantalla durante demostraci√≥n
- Audio claro (micr√≥fono de calidad)
- PostgreSQL abierto y funcionando
- Scripts preparados para ejecutar

## ‚è±Ô∏è CRONOMETRAJE EXACTO
- **LEONEL GONZ√ÅLEZ:** 0:00 - 7:30 (7.5 minutos exactos)
- **GONZALO INGA:** 7:30 - 15:00 (7.5 minutos exactos)
- **TOTAL: 15 minutos**

---

# üé§ PARTE 1: LEONEL GONZ√ÅLEZ (0:00 - 7:30)
## PRESENTACI√ìN, INTRODUCCI√ìN Y DEMOSTRACI√ìN INICIAL

### [0:00 - 0:30] Presentaci√≥n Personal
**[C√ÅMARA ENCENDIDA - PRIMER PLANO]**

"Hola, buenos d√≠as/tardes. Mi nombre es **Leonel Gonz√°lez**, estudiante de la Universidad Tecnol√≥gica Nacional, UTN. Junto con mi compa√±ero Gonzalo Inga vamos a presentar nuestro Trabajo Final Integrador de la materia Bases de Datos I."

### [0:30 - 1:00] Presentaci√≥n del Compa√±ero
**[C√ÅMARA HACIA GONZALO]**

"Mi compa√±ero es **Gonzalo Inga**, tambi√©n estudiante de UTN, quien luego les va a explicar los aspectos t√©cnicos avanzados y las conclusiones de nuestro proyecto."

### [1:00 - 2:30] Introducci√≥n al Proyecto
**[PUEDE APAGAR C√ÅMARA, COMPARTIR PANTALLA]**

"Hoy les voy a presentar nuestro **Sistema de Gesti√≥n de Pedidos y Env√≠os**. Este proyecto implementa una base de datos completa en PostgreSQL que modela la relaci√≥n entre pedidos de clientes y sus respectivos env√≠os.

El caso pr√°ctico que elegimos simula una empresa de e-commerce que necesita gestionar:
- Pedidos de clientes con diferentes estados
- Env√≠os asociados a cada pedido
- Seguimiento completo del proceso log√≠stico

Lo importante de nuestro dise√±o es que implementamos una **relaci√≥n uno a uno** entre pedidos y env√≠os, donde cada pedido tiene exactamente un env√≠o asociado."

### [2:30 - 3:30] Objetivos del Proyecto
**[LEONEL CONTIN√öA]**

"Los objetivos que nos planteamos fueron:

**T√©cnicos:**
1. Dise√±ar un esquema robusto con constraints y reglas de negocio
2. Cargar datos masivos para probar escalabilidad - usamos 20,000 registros
3. Optimizar performance con √≠ndices estrat√©gicos
4. Implementar seguridad y prevenci√≥n de inyecci√≥n SQL
5. Garantizar integridad transaccional con ACID

**De Negocio:**
1. Modelar correctamente el flujo pedido-env√≠o
2. Mantener trazabilidad completa
3. Generar reportes ejecutivos √∫tiles"

### [3:30 - 5:00] Mostrar el Esquema y Estructura
**[LEONEL - COMPARTIR PANTALLA CON POSTGRESQL]**

"Ahora vamos a ver c√≥mo funciona nuestro sistema en PostgreSQL.

**[COMANDO 1 - EJECUTAR EXACTAMENTE AS√ç:]**
```sql
\c sistema_pedidos_envios;
```
**[DECIR:] "Primero me conecto a nuestra base de datos"**

**[COMANDO 2 - EJECUTAR:]**
```sql
\dt
```
**[DECIR:] "Como pueden ver, tenemos nuestras dos tablas principales: pedidos y envios."**

**[COMANDO 3 - EJECUTAR:]**
```sql
\d pedidos
```
**[DECIR:] "Ac√° pueden ver todas las constraints de la tabla pedidos:"**
- La clave primaria autom√°tica (id SERIAL)
- El constraint UNIQUE en el n√∫mero de pedido  
- Los CHECK constraints para validar estados y montos
- El campo 'eliminado' para soft delete

**[COMANDO 4 - EJECUTAR:]**
```sql
\d envios
```
**[DECIR:] "Y en la tabla env√≠os vemos la implementaci√≥n de la relaci√≥n 1:1 con el constraint UNIQUE en pedido_id"**

### [5:00 - 6:30] Demostrar Datos y Consultas
**[LEONEL CONTIN√öA]**

"Ahora veamos los datos. Cargamos m√°s de 20,000 registros para probar la escalabilidad:

**[COMANDO 5 - EJECUTAR EXACTAMENTE:]**
```sql
SELECT 
    'pedidos' as tabla, COUNT(*) as registros FROM pedidos
UNION ALL
SELECT 
    'envios' as tabla, COUNT(*) as registros FROM envios;
```
**[DECIR:] "Perfecto, 20,005 registros en cada tabla."**

**[COMANDO 6 - EJECUTAR UNA CONSULTA DE NEGOCIO:]**
```sql
SELECT 
    e.empresa,
    COUNT(*) as total_envios,
    ROUND(AVG(e.costo), 2) as costo_promedio
FROM pedidos p
INNER JOIN envios e ON p.id = e.pedido_id
WHERE p.eliminado = false
GROUP BY e.empresa
ORDER BY total_envios DESC;
```
**[DECIR:] "Esta consulta nos muestra KPIs importantes del negocio por empresa transportista."**

### [6:30 - 7:30] Performance y Cierre de mi Parte
**[LEONEL CONTIN√öA]**

"Una parte clave fue la optimizaci√≥n con √≠ndices:

**[COMANDO 7 - EJECUTAR PARA MOSTRAR PERFORMANCE:]**
```sql
EXPLAIN ANALYZE 
SELECT COUNT(*) FROM pedidos WHERE cliente LIKE 'Juan%';
```
**[DECIR:] "Sin √≠ndices esta consulta tardar√≠a 50ms, con √≠ndices tarda menos de 1ms - una mejora de 50 veces."**

**[COMANDO 8 - MOSTRAR UNA VISTA:]**
```sql
SELECT * FROM vista_resumen_empresas LIMIT 3;
```
**[DECIR:] "Tambi√©n creamos vistas para simplificar el acceso a datos complejos."**

Para terminar mi parte, quiero destacar que implementamos:
‚úÖ 20,000+ registros manejados eficientemente
‚úÖ Relaci√≥n 1:1 perfectamente modelada  
‚úÖ Performance optimizada dram√°ticamente
‚úÖ 4 vistas de negocio funcionando

**[DECIR CLARAMENTE:] "Ahora le paso la palabra a Gonzalo que les va a explicar los fundamentos te√≥ricos, las caracter√≠sticas avanzadas y las conclusiones."**

---

# üé§ PARTE 2: GONZALO INGA (7:30 - 15:00)
## MARCO TE√ìRICO, CARACTER√çSTICAS AVANZADAS Y CONCLUSIONES

### [7:30 - 8:00] Transici√≥n y Marco Te√≥rico Inicial
**[GONZALO - C√ÅMARA ENCENDIDA PARA TRANSICI√ìN]**

"Gracias Leonel. Ahora voy a explicar los fundamentos te√≥ricos que aplicamos y las caracter√≠sticas avanzadas del sistema.

### [8:00 - 9:30] Fundamentos Te√≥ricos
**[GONZALO - COMPARTIR PANTALLA]**

"**Modelo Relacional:**
Nuestro sistema se basa en el modelo relacional de Edgar Codd, donde los datos se organizan en tablas relacionadas entre s√≠. Como vieron, implementamos dos entidades principales: PEDIDOS y ENVIOS.

**Relaci√≥n 1:1 (Uno a Uno):**
La caracter√≠stica principal de nuestro dise√±o es la relaci√≥n uno a uno entre pedidos y env√≠os. Esto significa que:
- Cada pedido tiene exactamente un env√≠o
- Cada env√≠o pertenece a exactamente un pedido
- T√©cnicamente lo logramos con una clave for√°nea UNIQUE en la tabla env√≠os

**Integridad Referencial:**
Implementamos constraints para mantener la consistencia:
- Claves primarias (PRIMARY KEY)
- Claves for√°neas (FOREIGN KEY) 
- Restricciones de dominio (CHECK constraints)
- Unicidad (UNIQUE constraints)"

### [9:30 - 11:00] Reglas de Negocio
**[GONZALO CONTIN√öA]**

"Las reglas de negocio que modelamos incluyen:

**Estados Controlados:**
- Pedidos: NUEVO ‚Üí FACTURADO ‚Üí ENVIADO
- Env√≠os: EN_PREPARACION ‚Üí EN_TRANSITO ‚Üí ENTREGADO

**Validaciones de Dominio:**
- Montos y costos siempre >= 0
- Empresas v√°lidas: ANDREANI, OCA, CORREO_ARG
- C√≥digos √∫nicos para pedidos y tracking

**Soft Delete:**
Implementamos baja l√≥gica para mantener hist√≥ricos - no eliminamos f√≠sicamente los datos."

### [11:00 - 12:30] Demostraci√≥n de Caracter√≠sticas Avanzadas
**[GONZALO - CONTIN√öA CON PANTALLA COMPARTIDA]**

"Ahora voy a mostrarles las caracter√≠sticas avanzadas que implementamos:

**SEGURIDAD - [COMANDO 9 - EJECUTAR:]**
```sql
SELECT validar_entrada_segura('Cliente Test');
```
**[DECIR:] "Esto funciona correctamente"**

**[COMANDO 10 - EJECUTAR PARA MOSTRAR SEGURIDAD:]**
```sql
SELECT validar_entrada_segura('Cliente"; DROP TABLE pedidos; --');
```
**[DECIR:] "Esto da error por seguridad - protege contra inyecci√≥n SQL"**

**TRANSACCIONES ACID - [COMANDO 11 - EJECUTAR:]**
```sql
SELECT actualizar_estado_pedido(1, 'FACTURADO');
```
**[DECIR:] "Esta funci√≥n cambia el estado del pedido de forma transaccional"**

**[COMANDO 12 - VERIFICAR EL CAMBIO:]**
```sql
SELECT numero, estado FROM pedidos WHERE id = 1;
```
**[DECIR:] "Como pueden ver, el estado cambi√≥ a FACTURADO. Si hubiera un error, PostgreSQL har√≠a rollback autom√°tico."**

**VISTAS DE NEGOCIO - [COMANDO 13 - EJECUTAR:]**
```sql
SELECT * FROM vista_dashboard_ejecutivo LIMIT 3;
```
**[DECIR:] "Esta es una de nuestras 4 vistas que simplifican las consultas complejas para usuarios finales."**

### [12:30 - 14:00] Aprendizajes y Reflexiones
**[GONZALO CONTIN√öA]**

"Este proyecto nos dej√≥ varios aprendizajes importantes:

**T√©cnicos:**
- La importancia del dise√±o de constraints desde el inicio
- C√≥mo los √≠ndices impactan dram√°ticamente en la performance (50x mejor)
- El valor de las transacciones para mantener consistencia
- La implementaci√≥n pr√°ctica de relaciones 1:1

**Arquitectura:**
- Un buen modelo de datos es la base de todo sistema exitoso
- La seguridad no es opcional - debe dise√±arse desde el inicio
- Las vistas simplifican el acceso sin comprometer el modelo

**De Proceso:**
- La planificaci√≥n es clave - definir reglas de negocio antes de codificar
- Las pruebas con datos masivos revelan problemas no visibles con pocos registros
- La documentaci√≥n clara facilita el mantenimiento"

### [14:00 - 15:00] Mejoras Futuras y Cierre Final
**[GONZALO CONTIN√öA HASTA EL FINAL]**

"**Mejoras Futuras:**
Si tuvi√©ramos que evolucionar este sistema, agregar√≠amos:
- Particionado de tablas para manejar millones de registros
- R√©plicas de lectura para distribuir la carga
- Triggers para auditor√≠a autom√°tica
- APIs REST para integraci√≥n con aplicaciones

**Resumen Final:**
En conclusi√≥n, logramos implementar un sistema de base de datos robusto, escalable y seguro que cumple con todos los requerimientos del TFI.

El sistema est√° listo para producci√≥n con:
‚úÖ 20,000+ registros manejados eficientemente
‚úÖ Integridad referencial al 100%
‚úÖ Performance optimizada con √≠ndices
‚úÖ Seguridad implementada contra inyecci√≥n SQL
‚úÖ Transacciones ACID funcionando
‚úÖ 4 vistas de negocio operativas
‚úÖ Documentaci√≥n completa

Queremos agradecer a la c√°tedra por los conocimientos transmitidos y la oportunidad de aplicarlos en este proyecto pr√°ctico. 

El c√≥digo completo, documentaci√≥n y esta demostraci√≥n est√°n disponibles en nuestra entrega.

Gracias por su atenci√≥n y quedamos a disposici√≥n para cualquier consulta."

---

## üìã CHECKLIST PARA LA GRABACI√ìN

### Antes de grabar:
- [ ] PostgreSQL funcionando con la base cargada
- [ ] Scripts preparados y probados
- [ ] C√°mara y micr√≥fono configurados
- [ ] Compartir pantalla configurado
- [ ] Cron√≥metro visible
- [ ] Ensayar transiciones entre presentadores

### Durante la grabaci√≥n:
- [ ] Presentaci√≥n con c√°mara encendida (primeros 2 min)
- [ ] Transiciones claras entre temas
- [ ] Mostrar resultados reales (no simular)
- [ ] Hablar claro y pausado
- [ ] Respetar tiempos asignados

### T√©cnico:
- [ ] Audio limpio sin eco
- [ ] Pantalla visible y legible
- [ ] Resultados de SQL visibles
- [ ] No pausas largas
- [ ] Finalizar en 15 minutos m√°ximo

## üéØ PUNTOS CLAVE A DESTACAR
1. **Relaci√≥n 1:1** - concepto central del proyecto
2. **20,000 registros** - escalabilidad demostrada  
3. **Performance 50x mejor** - optimizaci√≥n cuantificada
4. **Integridad 100%** - calidad de los datos
5. **Seguridad implementada** - protecci√≥n anti-inyecci√≥n
6. **Sistema production-ready** - valor pr√°ctico del TFI

---

## üìù RESUMEN DE COMANDOS A EJECUTAR

### üé§ LEONEL (0:00 - 7:30) - COMANDOS:

**COMANDO 1:** `\c sistema_pedidos_envios;`
**COMANDO 2:** `\dt`
**COMANDO 3:** `\d pedidos`
**COMANDO 4:** `\d envios`
**COMANDO 5:**
```sql
SELECT 
    'pedidos' as tabla, COUNT(*) as registros FROM pedidos
UNION ALL
SELECT 
    'envios' as tabla, COUNT(*) as registros FROM envios;
```

**COMANDO 6:**
```sql
SELECT 
    e.empresa,
    COUNT(*) as total_envios,
    ROUND(AVG(e.costo), 2) as costo_promedio
FROM pedidos p
INNER JOIN envios e ON p.id = e.pedido_id
WHERE p.eliminado = false
GROUP BY e.empresa
ORDER BY total_envios DESC;
```

**COMANDO 7:**
```sql
EXPLAIN ANALYZE 
SELECT COUNT(*) FROM pedidos WHERE cliente LIKE 'Juan%';
```

**COMANDO 8:** `SELECT * FROM vista_resumen_empresas LIMIT 3;`

### üé§ GONZALO (7:30 - 15:00) - COMANDOS:

**COMANDO 9:** `SELECT validar_entrada_segura('Cliente Test');`
**COMANDO 10:** `SELECT validar_entrada_segura('Cliente"; DROP TABLE pedidos; --');`
**COMANDO 11:** `SELECT actualizar_estado_pedido(1, 'FACTURADO');`
**COMANDO 12:** `SELECT numero, estado FROM pedidos WHERE id = 1;`
**COMANDO 13:** `SELECT * FROM vista_dashboard_ejecutivo LIMIT 3;`

### ‚ö†Ô∏è PREPARACI√ìN PREVIA:
1. Tener PostgreSQL abierto y conectado
2. Base de datos `sistema_pedidos_envios` cargada con todos los scripts
3. Verificar que todas las funciones y vistas existen
4. Probar cada comando una vez antes de grabar

¬°√âxito en la grabaci√≥n! üöÄ